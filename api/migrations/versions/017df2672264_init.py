"""init

Revision ID: 017df2672264
Revises: 236039c35ecc
Create Date: 2023-09-29 12:19:17.796116

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '017df2672264'
down_revision = '236039c35ecc'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_config_deleted', table_name='config')
    op.drop_index('ix_config_id', table_name='config')
    op.drop_index('ix_config_key', table_name='config')
    op.drop_index('ix_config_value', table_name='config')
    op.drop_table('config')
    op.drop_index('ix_role_deleted', table_name='role')
    op.drop_index('ix_role_id', table_name='role')
    op.drop_index('ix_role_name', table_name='role')
    op.drop_table('role')
    op.drop_table('roombooking')
    op.drop_index('ix_creditcard_deleted', table_name='creditcard')
    op.drop_index('ix_creditcard_id', table_name='creditcard')
    op.drop_table('creditcard')
    op.drop_index('ix_room_deleted', table_name='room')
    op.drop_index('ix_room_id', table_name='room')
    op.drop_index('ix_room_name', table_name='room')
    op.drop_table('room')
    op.drop_index('audit_action_idx', table_name='audit')
    op.drop_index('audit_table_idx', table_name='audit')
    op.drop_index('audit_tstamp_idx', table_name='audit')
    op.drop_table('audit')
    op.drop_index('ix_roomtype_deleted', table_name='roomtype')
    op.drop_index('ix_roomtype_id', table_name='roomtype')
    op.drop_table('roomtype')
    op.drop_index('ix_price_date', table_name='price')
    op.drop_index('ix_price_deleted', table_name='price')
    op.drop_index('ix_price_id', table_name='price')
    op.drop_table('price')
    op.drop_index('ix_booking_deleted', table_name='booking')
    op.drop_index('ix_booking_id', table_name='booking')
    op.drop_table('booking')
    op.alter_column('pyme', 'date',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('pyme', 'customer',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('pyme', 'product',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('pyme', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('pyme', 'price',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index('ix_user_firstname', table_name='user')
    op.drop_index('ix_user_lastname', table_name='user')
    op.drop_constraint('user_role_id_fkey', 'user', type_='foreignkey')
    op.drop_column('user', 'disabled')
    op.drop_column('user', 'ccnumber')
    op.drop_column('user', 'docnumber')
    op.drop_column('user', 'firstname')
    op.drop_column('user', 'email')
    op.drop_column('user', 'ccexp')
    op.drop_column('user', 'lastname')
    op.drop_column('user', 'cuit')
    op.drop_column('user', 'lang')
    op.drop_column('user', 'phone')
    op.drop_column('user', 'province')
    op.drop_column('user', 'cccvv')
    op.drop_column('user', 'doctype')
    op.drop_column('user', 'status')
    op.drop_column('user', 'role_id')
    op.drop_column('user', 'zip')
    op.drop_column('user', 'address')
    op.drop_column('user', 'dob')
    op.drop_column('user', 'country')
    op.drop_column('user', 'city')
    op.drop_column('user', 'company')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('company', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('dob', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('zip', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('doctype', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('cccvv', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('province', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('lang', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('cuit', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('lastname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('ccexp', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('firstname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('docnumber', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('ccnumber', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('disabled', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_foreign_key('user_role_id_fkey', 'user', 'role', ['role_id'], ['id'])
    op.create_index('ix_user_lastname', 'user', ['lastname'], unique=False)
    op.create_index('ix_user_firstname', 'user', ['firstname'], unique=False)
    op.alter_column('pyme', 'price',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('pyme', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('pyme', 'product',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('pyme', 'customer',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('pyme', 'date',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('booking',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('booking_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('checkin', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('checkout', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('breakfast', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('adults', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('children', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('babies', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('remarks', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('checkin_t', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('checkout_t', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name='booking_room_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='booking_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='booking_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_booking_id', 'booking', ['id'], unique=False)
    op.create_index('ix_booking_deleted', 'booking', ['deleted'], unique=False)
    op.create_table('price',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('date', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('roomtype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('ars', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['roomtype_id'], ['roomtype.id'], name='price_roomtype_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='price_pkey')
    )
    op.create_index('ix_price_id', 'price', ['id'], unique=False)
    op.create_index('ix_price_deleted', 'price', ['deleted'], unique=False)
    op.create_index('ix_price_date', 'price', ['date'], unique=False)
    op.create_table('roomtype',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('num_guests', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_guests', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roomtype_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('additional_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('additional_ars', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('single_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('single_ars', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roomtype_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_roomtype_id', 'roomtype', ['id'], unique=False)
    op.create_index('ix_roomtype_deleted', 'roomtype', ['deleted'], unique=False)
    op.create_table('audit',
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_tstamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('original_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("action = ANY (ARRAY['I'::text, 'D'::text, 'U'::text])", name='audit_action_check')
    )
    op.create_index('audit_tstamp_idx', 'audit', ['action_tstamp'], unique=False)
    op.create_index('audit_table_idx', 'audit', ['table_name'], unique=False)
    op.create_index('audit_action_idx', 'audit', ['action'], unique=False)
    op.create_table('room',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('room_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('roomtype_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['roomtype_id'], ['roomtype.id'], name='room_roomtype_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='room_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_room_name', 'room', ['name'], unique=False)
    op.create_index('ix_room_id', 'room', ['id'], unique=False)
    op.create_index('ix_room_deleted', 'room', ['deleted'], unique=False)
    op.create_table('creditcard',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cvv', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='creditcard_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='creditcard_pkey')
    )
    op.create_index('ix_creditcard_id', 'creditcard', ['id'], unique=False)
    op.create_index('ix_creditcard_deleted', 'creditcard', ['deleted'], unique=False)
    op.create_table('roombooking',
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['booking.id'], name='roombooking_book_id_fkey'),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name='roombooking_room_id_fkey'),
    sa.PrimaryKeyConstraint('book_id', 'room_id', name='roombooking_pkey')
    )
    op.create_table('role',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='role_pkey')
    )
    op.create_index('ix_role_name', 'role', ['name'], unique=False)
    op.create_index('ix_role_id', 'role', ['id'], unique=False)
    op.create_index('ix_role_deleted', 'role', ['deleted'], unique=False)
    op.create_table('config',
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='config_pkey')
    )
    op.create_index('ix_config_value', 'config', ['value'], unique=False)
    op.create_index('ix_config_key', 'config', ['key'], unique=False)
    op.create_index('ix_config_id', 'config', ['id'], unique=False)
    op.create_index('ix_config_deleted', 'config', ['deleted'], unique=False)
    # ### end Alembic commands ###
